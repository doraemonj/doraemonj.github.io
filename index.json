[{"categories":["Python"],"content":"How to paint different colors on canvas with Python? First of all, let’s import two modules import random from PIL import Image We use module ramdon as a digit creator. PIL is the de facto image process standard module in Python. Create a single picture with a random color i = 0 This step will facilitate you to write the next iteration step. You can easily change the ‘i=0’ line to ‘for i in range(10):’ and indent the following codes Then, Set the RGB single color randomly color1 = random.randint(0,255) color2 = random.randint(0,255) color3 = random.randint(0,255) background_color = (color1, color2, color3) Create a canvas with a specific color and a scale with 680 long × 200 width img_obj = Image.new('RGB', (680, 200), background_color) Save the image with open(\"title_en_pic_{0:03d}.png\".format(i+1), \"wb\") as f: img_obj.save(f, \"png\") {0:03d} means use 0 to fill the number until 1 turn to three digits 001 We can see a random-color image in your default path: title_en_pic_001.png Make 10 random-color images with an additional code: Just change the line i = 0, and indent all the following lines: # Change the below first line only: for i in range(10): # Set the RGB single color randomly color1 = random.randint(0,255) color2 = random.randint(0,255) color3 = random.randint(0,255) background_color = (color1, color2, color3) # Create a canvas with a specific color and a scale with 680 long × 200 width img_obj = Image.new('RGB', (680, 200), background_color) # Save the image with open(\"title_en_pic_{0:03d}.png\".format(i+1), \"wb\") as f: img_obj.save(f, \"png\") Ten pictures emerge in one second: Attachments ​ Source code download: title_image.py ","date":"2022-05-15","objectID":"/a_python_001/:0:0","tags":["Python","image"],"title":"Create random-color images with Python","uri":"/a_python_001/"},{"categories":null,"content":"No one imaged a machine cat can took out of anything easily from his pocket and go everwhere conveniently from outer space to inner earth. ","date":"2022-05-14","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Voyage Doraemon is world-wide cartoon idol from many adults' childhood to old age. Nearly every child wishes to be accompanied by this big face along his or her childhood journey. That’s where the this blog’s name comes: Doraemon’s Journey. This was a quest of a child who’s in a small cubby but aspires to sail away from the cage, although this boy is 37-year-old in 2022. Hi, I’m Chris, A slow-speed boy, and still working for my-little-boy-era’s dream in a virtual world with my programming handicraft. Nice to meet you here. ","date":"2022-05-14","objectID":"/about/:0:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"What can I do for you? If you’d like to translate any books to any language, I can do it for you with a world famous tranlation engine: DeepL, automatically, usually in an hour. If you’d finish a data analysis project, I can do it for you with my 3-year-old data analysis working experience in a credit-card data center. if you’d want to build your personal library in the electronical world with a full text search engine, I can help for you. You can try the search function in the right-top search-box. Search some words you pick up randomly, and there are surprises. In a word, I can save your time by tackling with the text processing for you. That’s just like Doraemonj’s pocket. Have a wonderful journey~ ","date":"2022-05-14","objectID":"/about/:0:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Contact me Mixin messenger: 29273 MIxin robot: 7000104144 Twitter: ChrisHowardaka Email: chrishowardaka@gmail.com ","date":"2022-05-14","objectID":"/about/:0:3","tags":null,"title":"About me","uri":"/about/"},{"categories":["Python"],"content":"According to current Covid-19 controlling situation in our country, my wife and daughter both have a great mind to go abroad. Learning English and get ideal IELTS scores are a possible and realistic way to achieve this goal. The first obstable seemed to recite sentences by heart. Unfortunately, it’s not. When I scratched dozens of sentences from YouTube in an English and Chinese spaced format, I found my little princess can not read the first sentence in a while through my help. ","date":"2022-05-14","objectID":"/dairy_004/:0:0","tags":["prepare","Python"],"title":"Order Sentences from Short to Long","uri":"/dairy_004/"},{"categories":["Python"],"content":"Background Fig 1: Original file: Not ordered The first sentence seemed a bit long for a ten-year-old Chinese girl. So I use Python to find the shortest sentence out, and put them to the upmost position. ","date":"2022-05-14","objectID":"/dairy_004/:0:1","tags":["prepare","Python"],"title":"Order Sentences from Short to Long","uri":"/dairy_004/"},{"categories":["Python"],"content":"Code # Mission: Filter the sentences with the fewest words to the upmost # Task 1: Input -- Read the md file by lines. \".md\" format is a same way of \".txt\". path = r\"/Users/tangqiang/private/\" # set path file_name = \"IELTS900.md\" # set file name with open(path+file_name) as f: # open IELTS900.md file txt = f.readlines() # read this file and put the whole content to a list variable named \"txt\" # Task 2: Process -- dry = [] # set an empty list variable to filter the blank lines for el in txt: # iterate all elments in txt if len(el.strip()) == 0: # blank lines, like space, enter,etc... need not to be recorded pass else: # record ordinary words to \"dry\" list dry.append(el.strip()) # strip() function used to delete the blank string before and after the word. # The function part should be put in front of the code, we put here to make it more apprehensible def is_contains_chinese(strs): \"\"\" check all the characters in the string, if any one belongs to Chinese, return True. \"\"\" for _char in strs: if '\\u4e00' \u003c= _char \u003c= '\\u9fa5': # return True return False # The function part should be put in front of the code # Split English and Chinese into two parts res_en = [] # set English sentence result list res_cn = [] # set Chinese sentence result list for i, el in enumerate(dry): if not is_contains_chinese(el): # if not contains Chinese res_en.append(el.strip()) else: res_cn.append(el.strip()) dic = dict(zip(res_en, res_cn)) # put two lists into one dictionary, then specific sentence can be found easily. new_en = sorted(res_en, key=len) # sort the english sentence by length # Task 3: Output -- write the new ordered sentences to a new file for el in new_en: with open(path + \"ordered_\" + file_name, \"a\") as f: # open a new file with \"a\" mode which means open then append new strings at the end of the file f.write(f\"{el}\\n\") # English sentence from short to long f.write(f\"{dic[el]}\\n\\n\") # Chinese sentence corresponds to English ones ","date":"2022-05-14","objectID":"/dairy_004/:0:2","tags":["prepare","Python"],"title":"Order Sentences from Short to Long","uri":"/dairy_004/"},{"categories":["Python"],"content":"Effect At last, we got what we need: from short sentence to long. Fig 2: Ordered file from short to long ","date":"2022-05-14","objectID":"/dairy_004/:0:3","tags":["prepare","Python"],"title":"Order Sentences from Short to Long","uri":"/dairy_004/"},{"categories":["Python"],"content":"Attachment ​ IELTS900.md ​ ordered_IELTS900.md ","date":"2022-05-14","objectID":"/dairy_004/:0:4","tags":["prepare","Python"],"title":"Order Sentences from Short to Long","uri":"/dairy_004/"},{"categories":["Git"],"content":"Delete a file To remove a file from Git version control while keeping the local file. Add the file to .gitignore. Execute in command line: ​ ​ git rm file_path --cached ​ Commit: Delete the file from the git version: ​ ​ git commit -m \"delete the file\" ​ ","date":"2022-03-13","objectID":"/git_rm/:0:1","tags":["Git"],"title":"Delete a Git File or Folder While Keeping the Local Ones","uri":"/git_rm/"},{"categories":["Git"],"content":"Delete a folder To remove a folder from Git version control while retaining the local folder, add the -r argument: ​ git rm -r folder_path --cached To remove all files in .gitignore from version control, you need to remove all files first, and then do the following to add all files. ​ git rm -r . --cached ​ git add . This way, files in gitignore will be ignored. ","date":"2022-03-13","objectID":"/git_rm/:0:2","tags":["Git"],"title":"Delete a Git File or Folder While Keeping the Local Ones","uri":"/git_rm/"}]