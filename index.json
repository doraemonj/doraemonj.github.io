[{"categories":["资本","投资"],"content":"Liquidated: An Ethnography of Wall Street (a John Hope Franklin Center Book) Liquidated A JOHN HOPE FRANKLIN CENTER BOOK Liquidated AN ETHNOGRAPHY OF WALL STREET KAREN HO Duke University Press Durham and London 2009 © 2009 Duke University Press All rights reserved. Printed in the United States of America on acid–free paper ∞ Designed by C. H. Westmoreland Typeset in Chaparral by Keystone Typesetting, Inc. Library of Congress Cataloging–in–Publication Data appear on the last printed page of this book. CONTENTS Acknowledgments Introduction: Anthropology Goes to Wall Street Wall Street Habitus: The Cultural Production of Liquidation Wall Street Institutional Culture: Access, Initiation, and Method Countering Abstraction, Constructing Financial Markets, and Particularizing Global Capitalism 1: Biographies of Hegemony: The Culture of Smartness and the Recruitment and Construction of Investment Bankers Recruitment The Cross-Pollination of Elitism Justifying Dominance in Global Financial Markets: The Culture of Smartness Writ Large 2: Wall Street’s Orientation: Exploitation, Empowerment, and the Politics of Hard Work Orientation Tiered Elevators: Investment Banks at a Glance The White-Collar Sweatshop Hard Work Forging Superior Workers Marked and Unmarked Investment Bankers and the Politics of Hard Work 3: Wall Street Historiographies and the Shareholder Value Revolution Contextualizing Shareholder Value The Takeover Movement of the 1980s and Wall Street’s Collective Memory Historicizing the Takeover Movement Takeover Players, Mechanisms, and Worldviews The “Reclaiming” of Shareholder Value Implosions of Shareholder Value “We Can Wing It Like That”: The Problem of Efficiency in Shareholder Value Narratives Shareholder Value Temporalities 4: The Neoclassical Roots and Origin Narratives of Shareholder Value Neoclassical Assumptions and the Problem of the Modern Corporation Shareholding, the Stock Market, and the Rise of the Modern Corporation Liquidity, Not Control The Modern Corporation and the Reimagining of Neoclassical Assumptions The Managerial Challenge Shareholding and Wall Street Worldviews in the Postwar Era The Persistence of Neoclassical Assumptions The Death of the Schizophrenic Corporation 5: Downsizers Downsized: Job Insecurity and Investment Banking Corporate Culture The Downsized Anthropologist Investment Banking Approaches to Work Narratives of Job Insecurity on Wall Street Insecurity, Downsizing, and Market Externalizations The Brave New Workplace 6: Liquid Lives, Compensation Schemes, and the Making of (Unsustainable) Financial Markets A Moment’s Notice The Culture of High Risk/High Reward The Rationalization of Job Insecurity through Compensation The “Strategy of No Strategy” The Construction of Crisis: The Social Consequences of Investment Banking Culture 7: Leveraging Dominance and Crises through the Global Global Seduction Global Fissures: What’s in a Name? Global Markets—or Global Marketing? Global Contradictions: Simultaneously Here and Everywhere? Constituting Global Presence and Flexibility Global Ambitions and Instabilities Subprime Coda Notes References For my daughter and son, Mira and August, in the hope that their generation will see greater socioeconomic equality. Acknowledgments An intellectual commitment to social and economic justice first galvanized this book’s journey. My search to understand the massive sea changes occurring in American business practices during the past three decades took me to the doorstep of Wall Street investment banks, an unconventional site for anthropological research. This project found a champion in my graduate advisor, Emily Martin, during a time when studying centers of power within the United States was still uncharted territory for most anthropologists. I still remember how, after I was offered a job at an investment bank, I called Emily in a panic as Wall Street demanded my immediate response, leaving me little time to think through how to negotiate a job with potent","date":"2022-06-05","objectID":"/liquidated/:0:0","tags":["capital","investment","资本"],"title":"Liquidated: AN ETHNOGRAPHY OF WALL STREET","uri":"/liquidated/"},{"categories":["通识教育"],"content":"This article is from a YouTube interview to Naval Ravicant. What’s your opinion on the current educational system? When I ask people in Twitter what they wanted to ask you this question came up a couple times, which was how would you fix it? What’s your opinion on the education system? And what are your thoughts around that? Naval Ravikant: I think there’s no question. It’s completely obsolete. Education system is a path-dependent outcome from the need for daycare, from the need for prisons, for college aged males who would otherwise overrun society, and cause a lot of havoc. The original medieval universities had guard towers that face inwards. For example, you have to put a curfew and then you need to lock up the young 18 year old males before they go out with sword and daggers and you know create trouble. So, college and schools and what the way we think about them they come from a time period when books were rare, knowledge was rare, babysitting was rare, crime was common, violence was prevalent, there was no such self-guided learning. So I think schools are just byproducts of these kinds of institutions. Now we have the internet, which is the greatest level of knowledge ever created completely interconnected. So it’s very easy to learn if you actually have the desire to learn, everything that’s on the internet you can go on Khan academy, you can get MIT and Yale lectures online, you can get all the coursework and you get interactivity, you can read blogs by brilliant people, we can read all these great books. So the ability to learn, the means of learning, the tools of learning are abundant and infinite. The desire to learn that’s incredibly scarce. I just don’t think that schools matter for self-motivated students, what the schools matter for is one is to keep the kids out of the parents care while the parents go to work. It creates socialization because kids want to be around their peers, and they want to learn how to operate society with their peers. But I think it’s purely learning you’re after that learning can be done much more either on your own to through the internet or by uniting through the internet with like-minded groups. So I think that’s one problem with the current educational system. The second problem is: what do you choose to learn? The current educational system has to have a one-size-fits-all model has to say you have to learn X now and then you have to learn Y. You know to give you examples where this is obsolete memorization. In the day and age of Google and smartphones, memorization is obsolete. Why should you be memorizing the battle Trafalgar, why you should be memorizing what the capital of this or that state? But we still put undue weight on that just because that’s the way it’s always been done. We’ve lived to a pre-google world. Another example is when we’re moving along at a certain pace, I’m sure 90 percent of your listeners have had this happen to them, which is they were learning mathematics and at some point they were keeping up they were doing arithmetic and they were doing geometry, then they did strigonometry then they precalculated the calc. And somewhere in there they got lost. Somewhere in there while building the massive edifice the logical structure that mathematics is. They missed one lesson. They missed one concept. They missed five classes. Their brain couldn’t think a certain way that something was being explained to them. It should have been explained visually, but it was being wxplaied numerically, or it should have been expressed symbolically, and it was being explained cartography. But they were not able to keep up, and the moment you lose that wrong in mathematics the moment you miss that wrong of the ladder, you can’t go to the next one, because now the next one the teacher’s like okey we’re done with pre-calculus now we’re moving on to calculus. You’re saying wait, I didn’t understand pre-calculus, and I understand how pre-calculus leads from trigonometry to calculus. ","date":"2022-05-24","objectID":"/navel_ravikant_current_educational_system/:0:0","tags":["通识教育"],"title":"Naval Ravikants: Current Educational System is Completely Obsolete","uri":"/navel_ravikant_current_educational_system/"},{"categories":["Python"],"content":"In previous post , we learnt how to create arrays with numpy. Today we’re going to talk about how to index and transform numpy arrays. When it comes to arrays, we usually use quare brackets [] to index and slice: arr = np.arange(6).reshape(3,2) .arange method specified arr array with 6 elements, and .reshape method specified tha array with 3 rows and 2 colonms. Print arr: print(arr) Feedback: array([[0, 1], [2, 3], [4, 5]]) ","date":"2022-05-22","objectID":"/a_python_003/:0:0","tags":["Python","Numpy"],"title":"How to Select and Transform Numpy Arrays?","uri":"/a_python_003/"},{"categories":["Python"],"content":"How to select elements in array? Select a column If you want to select a column, say, the rightmost column 1,3,5: arr[:, 1] The colon : here means to specify the start and end place you need from the origal array. Feedback: array([1, 3, 5]) Select multiple columns arr[:, [0,1]] Feedback: array([[0, 1], [2, 3], [4, 5]]) Select a row arr[1, :] Feedback: array([2, 3]) Select multiple rows arr[[0,1], :] Feedback: array([[0, 1], [2, 3]]) Select a specific element arr[1,1] Feedback: 3 Select in single condition Select a row in which the rightmost elment is greater than 2: arr[arr[:, 1]\u003e2,] Feedback: array([[2, 3], [4, 5]]) Select in multiple conditions Select a row that meets both conditions, which are the rightmost elment is greater than 2 and the rightmost elment is less than 4: arr[(arr[:,1]\u003e2) \u0026 (arr[:, 1]\u003c4),] Feedback: array([[2, 3]]) ","date":"2022-05-22","objectID":"/a_python_003/:0:1","tags":["Python","Numpy"],"title":"How to Select and Transform Numpy Arrays?","uri":"/a_python_003/"},{"categories":["Python"],"content":"How to transform the array? In practice, we often need to change the form of the array. There are basically four method: Change array dimensions arr.reshape(2,3) Feedback: array([[0, 1, 2], [3, 4, 5]]) Notice: arr is a new array with a different set of dimensions. Transposition of arrays arr.T or np.transpose(arr) .T method or np.transpose() function reversed the look of the array compeletely. We see following below: array([[0, 2, 4], [1, 3, 5]]) arr has not changed yet. When we input print(arr) in the python console, we’ll get the feedback:  [[0 1] [2 3] [4 5]] Flatten the array arr.flatten() or: arr.ravel() Feedback the same as below: array([0, 1, 2, 3, 4, 5]) .flatten() and .ravel() functions take us the same one-dimension array. Notice: ravel usually returns a view into the existing array (sometimes it returns a copy). Flatten returns a new array. Have a good time, and see you next article. ","date":"2022-05-22","objectID":"/a_python_003/:0:2","tags":["Python","Numpy"],"title":"How to Select and Transform Numpy Arrays?","uri":"/a_python_003/"},{"categories":["Python"],"content":"As the previous blog mentioned, we can translate any ebook to any other language with a left-right format, which means original texts is on left part of your screen, and the translations on right. Here, wo translate anther six English ebooks to Chinese with nearly the same format. Click bookcover to read them. 1. Skin in the Game —— Hidden Asymmetries in Daily Life A 2018 nonfiction book by Nassim Nicholas Taleb, a former options trader with a background in the mathematics of probability and statistics. 2. End of History and the Last Man A 1992 book of political philosophy by American political scientist Francis Fukuyama which argues that with the ascendancy of Western liberal democracy—which occurred after the Cold War (1945–1991) and the dissolution of the Soviet Union (1991)—humanity has reached “not just … the passing of a particular period of post-war history, but the end of history as such: That is, the end-point of mankind’s ideological evolution and the universalization of Western liberal democracy as the final form of human government.” —— from Wikipedia 3. The Discovery of Society This classic text explores the lives and ideas of the social thinkers who have shaped and continue to forge traditions in sociology. Focusing on the great names in the field, it weaves biographical and conceptual details into a tapestry of the history of social thought of the 19th and 20th centuries. Written in a narrative style that is accessible and exciting, this text serves as an excellent supplement for courses in social and sociological theory, the history of social thought, the history of sociology, and introduction to sociology. 4. A Treatise of Human Nature Treatise of Human Nature: Being an Attempt to Introduce the Experimental Method of Reasoning into Moral Subjects (1739–40) is a book by Scottish philosopher David Hume, considered by many to be Hume’s most important work and one of the most influential works in the history of philosophy.[1] The Treatise is a classic statement of philosophical empiricism, scepticism, and naturalism. In the introduction Hume presents the idea of placing all science and philosophy on a novel foundation: namely, an empirical investigation into human nature. Impressed by Isaac Newton’s achievements in the physical sciences, Hume sought to introduce the same experimental method of reasoning into the study of human psychology, with the aim of discovering the “extent and force of human understanding”. 5. An Essay Concerning Human Understanding An Essay Concerning Human Understanding is a work by John Locke concerning the foundation of human knowledge and understanding. It first appeared in 1689 (although dated 1690) with the printed title An Essay Concerning Human Understanding. He describes the mind at birth as a blank slate (tabula rasa, although he did not use those actual words) filled later through experience. The essay was one of the principal sources of empiricism in modern philosophy, and influenced many enlightenment philosophers, such as David Hume and George Berkeley. 6. The Economist The Economist is a British weekly newspaper printed in demitab format and published digitally that focuses on current affairs, international business, politics, technology, and culture. Based in London, the newspaper is owned by The Economist Group, with core editorial offices in the United States, as well as across major cities in continental Europe, Asia, and the Middle East. In 2019, its average global print circulation was over 909,476; this, combined with its digital presence, runs to over 1.6 million. Across its social media platforms, it reaches an audience of 35 million, as of 2016. The newspaper has a prominent focus on data journalism and analysis over original reporting, to both criticism and acclaim. Notice: this translation is only for code learning, so If my translations violate your copyright, please contact me to remove them. ","date":"2022-05-21","objectID":"/six_other_ebook_translation_examples/:0:0","tags":["Python"],"title":"Six Translation Examples of E-book","uri":"/six_other_ebook_translation_examples/"},{"categories":["Python"],"content":"As information stuffs our environment, and numerous languages are overwhelming our eyes. We don’t read books in Spanish, Japanese, or Chinese, not only because we do not interest in them, but the cost of translating. In the past, we should hire translators or even translation artists to transform the state of the information. But it will cost much less than old times, nearly to zero, exactly. Because of Python and deepL. Today, we are going to show the results that anyone can translate an English book to Chinese in an hour. First one is an old book about new method to work out mathematic problems. Example pages: 1. Content translated 2. Table translated 3. Picture copied Read English-Chinese Translation: How to Solve it In order to ease visual stress, I’ve darkened the base of the translation, but kept the original English texts and images. You can change the .css file to adjust the backgound colors. Remember, put two files intu one file folder, then you can modify them easily. We’ll have a look at how to solve it in the next articles. See you. ","date":"2022-05-20","objectID":"/translate_an_ebook_into_other_language/:0:0","tags":["Python"],"title":"Translate an Ebook into Other Language","uri":"/translate_an_ebook_into_other_language/"},{"categories":["Python"],"content":"NumPy is a short name for Numerical Python which is a high-performance package for computing and analysing. ndarry is the core function of Numpy, which means n-dimensional array. The major differece between “array” and “list” is: the elements in array is the same kind, but in the list, there are can be a variety of types. We usually use NumPy functions to create arrays quickly, more faster than using the functions from Standard Libery. First, let’s import Numpy module as most programmers do, abbreviating Numpy as np: import numpy as np ","date":"2022-05-20","objectID":"/a_python_002/:0:0","tags":["Python","Numpy"],"title":"How to Prepare Data with Numpy in Python","uri":"/a_python_002/"},{"categories":["Python"],"content":"Create arrays An ndarray is made by literal data and description information. We use: ​ .shape to lookup the shape of an array ​ .dim to lookup the dimensions One-demension arrays We create a one-dimension array in Python Console with inputting this command: np.array([1,2,3], dtype=float) One dimension array is also named “vector”. We get feedback immediately: array([1., 2., 3.]) This is our first one dimension array, aka “vector”. It’s useful, but not now. Two-demension arrays Then, let’s make a two dimension array with Numpy: np.array([[1,2,3],[4,5,6]]) Feedback from Python: array([[1, 2, 3], [4, 5, 6]]) This is a two dimension array. Arithmetic progression arrays Also, we made an arithmetic progression with a step length of 0.5: np.arange(0,3,0.5) Feedback from Python: array([0. , 0.5, 1. , 1.5, 2. , 2.5]) As most functions in Python, it will take the start para into account but not take the last one, so this array is not included the number 3. If step length equals 1, then the last param can be omitted: np.arange(0,3) Feedback from Python: array([0, 1, 2]) An arithmetic progression with four elements: np.linspace(0,3,4) Feedback: array([0., 1., 2., 3.]) If we omit the last para 4, then we’ll get an arithmetic progression array with 50 elements: np.linspace(0,3) Feedback: array([0. , 0.06122449, 0.12244898, 0.18367347, 0.24489796, 0.30612245, 0.36734694, 0.42857143, 0.48979592, 0.55102041, 0.6122449 , 0.67346939, 0.73469388, 0.79591837, 0.85714286, 0.91836735, 0.97959184, 1.04081633, 1.10204082, 1.16326531, 1.2244898 , 1.28571429, 1.34693878, 1.40816327, 1.46938776, 1.53061224, 1.59183673, 1.65306122, 1.71428571, 1.7755102 , 1.83673469, 1.89795918, 1.95918367, 2.02040816, 2.08163265, 2.14285714, 2.20408163, 2.26530612, 2.32653061, 2.3877551 , 2.44897959, 2.51020408, 2.57142857, 2.63265306, 2.69387755, 2.75510204, 2.81632653, 2.87755102, 2.93877551, 3. ]) Repeated arrays Repeat every elments in array for two times: np.repeat([1,2], 2) Feedback: array([1, 1, 2, 2]) Repeat the whole array for two times: np.tile([1,2], 2) Feedback: array([1, 2, 1, 2]) Just like tiling on a wall. Arrays of all ones np.ones((2,3)) Feedback: array([[1., 1., 1.], [1., 1., 1.]]) Arrays of all zeros np.zeros((3,2)) Feedback: array([[0., 0.], [0., 0.], [0., 0.]]) Arrays with random elements If we wanna create an array with 3 random decimals from 0 to 1, then we code: np.random.random(3) Feedback: array([0.19756156, 0.95824079, 0.37344019]) If we wanna get specific numbers from a normal distribution, then we code: np.random.randn(3) Feedback: array([ 0.74662532, -1.32921822, 0.59149021]) randn means random numbers for normal distributions. If we wanna an array with specific normal distribution: np.random.normal(loc = 0, scale = 1, size = 5) It means the mean value is 0, the standard deviation is 1, and the elements in array are 5. Feedback: array([-0.32578159, 1.68852453, 0.31375627, -0.26488277, 0.19965238]) Moreover, NumPy supports a range of data types: bool, int8, int16, int32, int 64, unit8, unit16, unit32, uint64, float16, float32, float64, etc. We can use .astype()function to convert the data type. See you next posts. ","date":"2022-05-20","objectID":"/a_python_002/:0:1","tags":["Python","Numpy"],"title":"How to Prepare Data with Numpy in Python","uri":"/a_python_002/"},{"categories":["Python"],"content":"How to paint different colors on canvas with Python? First of all, let’s import two modules import random from PIL import Image We use module ramdon as a digit creator. PIL is the de facto image process standard module in Python. Create a single picture with a random color i = 0 This step will facilitate you to write the next iteration step. You can easily change the ‘i=0’ line to ‘for i in range(10):’ and indent the following codes Then, Set the RGB single color randomly color1 = random.randint(0,255) color2 = random.randint(0,255) color3 = random.randint(0,255) background_color = (color1, color2, color3) Create a canvas with a specific color and a scale with 680 long × 200 width img_obj = Image.new('RGB', (680, 200), background_color) Save the image with open(\"title_en_pic_{0:03d}.png\".format(i+1), \"wb\") as f: img_obj.save(f, \"png\") {0:03d} means use 0 to fill the number until 1 turn to three digits 001 We can see a random-color image in your default path: title_en_pic_001.png Make 10 random-color images with an additional code: Just change the line i = 0, and indent all the following lines: # Change the below first line only: for i in range(10): # Set the RGB single color randomly color1 = random.randint(0,255) color2 = random.randint(0,255) color3 = random.randint(0,255) background_color = (color1, color2, color3) # Create a canvas with a specific color and a scale with 680 long × 200 width img_obj = Image.new('RGB', (680, 200), background_color) # Save the image with open(\"title_en_pic_{0:03d}.png\".format(i+1), \"wb\") as f: img_obj.save(f, \"png\") Ten pictures emerge in one second: Attachments ​ Source code download: title_image.py ","date":"2022-05-15","objectID":"/a_python_001/:0:0","tags":["Python","image"],"title":"Create random-color images with Python","uri":"/a_python_001/"},{"categories":null,"content":"No one imaged a machine cat can took out of anything easily from his pocket and go everwhere conveniently from outer space to inner earth. ","date":"2022-05-14","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Voyage Doraemon is world-wide cartoon idol from many adults' childhood to old age. Nearly every child wishes to be accompanied by this big face along his or her childhood journey. That’s where the this blog’s name comes: Doraemon’s Journey. This was a quest of a child who’s in a small cubby but aspires to sail away from the cage, although this boy is 37-year-old in 2022. Hi, I’m Chris, A slow-speed boy, and still working for my-little-boy-era’s dream in a virtual world with my programming handicraft. Nice to meet you here. ","date":"2022-05-14","objectID":"/about/:0:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"What can I do for you? If you’d like to translate any books to any language, I can do it for you with a world famous tranlation engine: DeepL, automatically, usually in an hour. If you’d finish a data analysis project, I can do it for you with my 3-year-old data analysis working experience in a credit-card data center. if you’d want to build your personal library in the electronical world with a full text search engine, I can help for you. You can try the search function in the right-top search-box. Search some words you pick up randomly, and there are surprises. In a word, I can save your time by tackling with the text processing for you. That’s just like Doraemonj’s pocket. Have a wonderful journey~ ","date":"2022-05-14","objectID":"/about/:0:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Contact me Mixin messenger: 29273 MIxin robot: 7000104144 Twitter: ChrisHowardaka Email: chrishowardaka@gmail.com ","date":"2022-05-14","objectID":"/about/:0:3","tags":null,"title":"About me","uri":"/about/"},{"categories":["Git"],"content":"Delete a file To remove a file from Git version control while keeping the local file. Add the file to .gitignore. Execute in command line: ​ ​ git rm file_path --cached ​ Commit: Delete the file from the git version: ​ ​ git commit -m \"delete the file\" ​ ","date":"2022-03-13","objectID":"/git_rm/:0:1","tags":["Git"],"title":"Delete a Git File or Folder While Keeping the Local Ones","uri":"/git_rm/"},{"categories":["Git"],"content":"Delete a folder To remove a folder from Git version control while retaining the local folder, add the -r argument: ​ git rm -r folder_path --cached To remove all files in .gitignore from version control, you need to remove all files first, and then do the following to add all files. ​ git rm -r . --cached ​ git add . This way, files in gitignore will be ignored. ","date":"2022-03-13","objectID":"/git_rm/:0:2","tags":["Git"],"title":"Delete a Git File or Folder While Keeping the Local Ones","uri":"/git_rm/"}]